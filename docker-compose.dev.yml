version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    container_name: inventory_app_dev
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://inventory_user:inventory_password@postgres:5432/inventory_system?schema=public
      - REDIS_URL=redis://redis:6379
      - BUN_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/bun.lockb
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    # Optimizaciones para desarrollo con Bun
    stdin_open: true
    tty: true
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_dev
    environment:
      POSTGRES_DB: inventory_system
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - inventory_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U inventory_user -d inventory_system']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: inventory_redis_dev
    ports:
      - '6379:6379'
    volumes:
      - redis_dev_data:/data
    networks:
      - inventory_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  inventory_network:
    driver: bridge
