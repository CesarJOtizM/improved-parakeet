// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base entities for all domains
model BaseEntity {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  orgId       String   // Multi-tenant organization ID
  
  @@map("base_entities")
}

// Organizations (Multi-tenant)
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  products    Product[]
  warehouses  Warehouse[]
  
  @@map("organizations")
}

// Users
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  firstName    String
  lastName     String
  passwordHash String
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  orgId        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [orgId], references: [id])
  userRoles    UserRole[]
  sessions     Session[]
  
  @@map("users")
}

// Roles
model Role {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userRoles   UserRole[]
  permissions RolePermission[]
  
  @@unique([name, orgId])
  @@map("roles")
}

// User-Role assignments
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  orgId  String
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId, orgId])
  @@map("user_roles")
}

// Permissions
model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  module      String
  action      String
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

// Role-Permission assignments
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Sessions
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  ipAddress String?
  userAgent String?
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId, orgId])
  @@index([token])
  @@index([expiresAt])
  @@index([isActive])
  
  @@map("sessions")
}

// OTP (One-Time Password) for password reset and account activation
model Otp {
  id         String   @id @default(cuid())
  email      String
  code       String
  type       String   // PASSWORD_RESET, ACCOUNT_ACTIVATION, TWO_FACTOR
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  attempts   Int      @default(0)
  maxAttempts Int     @default(3)
  ipAddress  String?
  userAgent  String?
  orgId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Indexes for performance
  @@index([email, type, orgId])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([orgId])
  
  @@map("otp")
}

// Products
model Product {
  id          String   @id @default(cuid())
  sku         String
  name        String
  description String?
  category    String?
  unit        String
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [orgId], references: [id])
  movements    MovementLine[]
  stock       Stock[]
  
  @@unique([sku, orgId])
  @@map("products")
}

// Warehouses
model Warehouse {
  id          String   @id @default(cuid())
  code        String
  name        String
  description String?
  address     String?
  isActive    Boolean  @default(true)
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [orgId], references: [id])
  stock        Stock[]
  
  @@unique([code, orgId])
  @@map("warehouses")
}

// Stock
model Stock {
  id         String  @id @default(cuid())
  productId  String
  warehouseId String
  quantity   Int     @default(0)
  unitCost   Decimal @db.Decimal(10, 2)
  orgId      String
  
  // Relations
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  
  @@unique([productId, warehouseId, orgId])
  @@map("stock")
}

// Movements
model Movement {
  id          String   @id @default(cuid())
  type        String   // IN, OUT, ADJUSTMENT
  status      String   @default("DRAFT") // DRAFT, POSTED, VOIDED
  reference   String?
  notes       String?
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  lines MovementLine[]
  
  @@map("movements")
}

// Movement Lines
model MovementLine {
  id         String  @id @default(cuid())
  movementId String
  productId  String
  quantity   Int
  unitCost   Decimal @db.Decimal(10, 2)
  orgId      String
  
  // Relations
  movement Movement @relation(fields: [movementId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
  
  @@map("movement_lines")
}
